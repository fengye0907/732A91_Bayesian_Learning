knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, out.width = "320px")
# setting
library(rstan)
library(latex2exp)
library(gridExtra)
library(ggplot2)
rm(list = ls())
set.seed(123456)
# AR(1) process
AR1 <- function(phi, n=200, mu=10, sigma2=2){
x <- c()
x[1] <- mu
for (i in 2:n) {
x[i] <- mu + phi*(x[i-1]-mu) + rnorm(1, 0, sqrt(sigma2))
}
x
}
iter <- 1:200
phis <- c(-0.9, 0, 0.9)
plot.a <- lapply(phis, function(phi){
x <- AR1(phi = phi)
title <- paste0("phi = ",phi)
data <- data.frame(iter = iter, x=x)
ggplot(data) +
geom_line(aes(x=iter, y=x)) +
ggtitle(title)
})
plot(arrangeGrob(grobs = plot.a))
set.seed(1111)
x <- AR1(phi=0.3)
y <- AR1(phi=0.95)
N = 200
StanModel='
data {
int<lower=0> N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
model {
mu ~ normal(0,100);
sigma2 ~ scaled_inv_chi_square(100,1);
x[2:N] ~ normal( mu + phi*(x[1:(N-1)]-mu), sqrt(sigma2));
}'
fit1 <- stan(
model_code = StanModel,  # Stan program
data = list(N=N, x=x),    # named list of data
chains = 1,
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
refresh = 0
)
fit2 <- stan(
model_code = StanModel,  # Stan program
data = list(N=N, x=y),    # named list of data
chains = 1,
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
refresh = 0
)
fit1
re1 <- extract(fit1)
fit2
re2 <- extract(fit2)
grid.arrange(plot(fit1), plot(fit2), ncol = 1)
trace1 <- traceplot(fit1, pars = c("mu", "phi"), inc_warmup = TRUE, nrow = 2)
trace2 <- traceplot(fit2, pars = c("mu", "phi"), inc_warmup = TRUE, nrow = 2)
grid.arrange(arrangeGrob(trace1, bottom = "0.3"), arrangeGrob(trace1, bottom = "0.95"), ncol = 2)
data.c <- read.csv("campy.dat", header = TRUE)
N <- dim(data.c)[1]
set.seed(1111)
StanModel.c='
data {
int<lower=0> N;
int c[N];
}
parameters {
real mu;
real<lower=0> sigma2;
real phi;
real x[N];
}
transformed parameters {
real theta[N];
theta = exp(x);
}
model {
// prior
mu ~ normal(0,50);
sigma2 ~ scaled_inv_chi_square(100,10);
// model
for (n in 2:N){
x[n] ~ normal(mu+phi*(x[n-1]-mu),sqrt(sigma2));
c[n] ~ poisson(theta[n]);
}
}
'
set.seed(1111)
datapoi=list(N=N,c=data.c$c)
fit.c<-stan(model_code=StanModel.c,
data=datapoi,
warmup=1000,
iter=2000,
chains=1,
refresh=0
)
re.c <- extract(fit.c)
index <- 1:N
plot(x=index, y=data.c$c, col="black",type="l",ylim=c(0,70))
theta <- exp(colMeans(re.c$x))
lines(x=index, y=theta, col="red", lty=3)
q <- matrix(nrow=2, ncol=140)
for (i in index) {
q[,i] <- quantile(re.c$x[,i],probs = c(0.025, 0.975))
}
lines(x=index, y=exp(q[1,]), lty=2, col = "pink")
lines(x=index, y=exp(q[2,]), lty=2, col = "pink")
legend(x=1,y=50, legend=c("c","theta"), col=c("black", "red"),lty=1,  cex=1)
set.seed(1111)
StanModel.c='
data {
int<lower=0> N;
int c[N];
}
parameters {
real mu;
real<lower=0> sigma2;
real phi;
real x[N];
}
transformed parameters {
real theta[N];
theta = exp(x);
}
model {
// prior
mu ~ normal(0,50);
sigma2 ~ scaled_inv_chi_square(50,0.5);
// model
for (n in 2:N){
x[n] ~ normal(mu+phi*(x[n-1]-mu),sqrt(sigma2));
c[n] ~ poisson(theta[n]);
}
}
'
set.seed(1111)
datapoi=list(N=N,c=data.c$c)
fit.c<-stan(model_code=StanModel.c,
data=datapoi,
warmup=1000,
iter=2000,
chains=1,
refresh=0
)
re.c <- extract(fit.c)
index <- 1:N
plot(x=index, y=data.c$c, col="black",type="l",ylim=c(0,70))
theta <- exp(colMeans(re.c$x))
lines(x=index, y=theta, col="red", lty=3)
q <- matrix(nrow=2, ncol=140)
for (i in index) {
q[,i] <- quantile(re.c$x[,i],probs = c(0.025, 0.975))
}
lines(x=index, y=exp(q[1,]), lty=2, col = "pink")
lines(x=index, y=exp(q[2,]), lty=2, col = "pink")
legend(x=1,y=50, legend=c("c","theta"), col=c("black", "red"),lty=1,  cex=1)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, out.width = "320px")
# setting
library(rstan)
library(latex2exp)
library(gridExtra)
library(ggplot2)
rm(list = ls())
set.seed(123456)
# AR(1) process
AR1 <- function(phi, n=200, mu=10, sigma2=2){
x <- c()
x[1] <- mu
for (i in 2:n) {
x[i] <- mu + phi*(x[i-1]-mu) + rnorm(1, 0, sqrt(sigma2))
}
x
}
iter <- 1:200
phis <- c(-0.9, 0, 0.9)
plot.a <- lapply(phis, function(phi){
x <- AR1(phi = phi)
title <- paste0("phi = ",phi)
data <- data.frame(iter = iter, x=x)
ggplot(data) +
geom_line(aes(x=iter, y=x)) +
ggtitle(title)
})
plot(arrangeGrob(grobs = plot.a))
set.seed(1111)
x <- AR1(phi=0.3)
y <- AR1(phi=0.95)
N = 200
StanModel='
data {
int<lower=0> N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
model {
\\ prior
mu ~ normal(0,100);
sigma2 ~ scaled_inv_chi_square(100,2);
\\ model
x[2:N] ~ normal( mu + phi*(x[1:(N-1)]-mu), sqrt(sigma2));
}'
fit1 <- stan(
model_code = StanModel,  # Stan program
data = list(N=N, x=x),    # named list of data
chains = 1,
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
refresh = 0
)
set.seed(1111)
x <- AR1(phi=0.3)
y <- AR1(phi=0.95)
N = 200
StanModel='
data {
int<lower=0> N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
model {
\\ prior
mu ~ normal(0,100);
sigma2 ~ scaled_inv_chi_square(100,2);
\\ model
x[2:N] ~ normal( mu + phi*(x[1:(N-1)]-mu), sqrt(sigma2));
}'
fit1 <- stan(
model_code = StanModel,  # Stan program
data = list(N=N, x=x),    # named list of data
chains = 1,
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
refresh = 0
)
set.seed(1111)
x <- AR1(phi=0.3)
y <- AR1(phi=0.95)
N = 200
StanModel='
data {
int<lower=0> N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
model {
mu ~ normal(0,100);
sigma2 ~ scaled_inv_chi_square(100,2);
x[2:N] ~ normal( mu + phi*(x[1:(N-1)]-mu), sqrt(sigma2));
}'
fit1 <- stan(
model_code = StanModel,  # Stan program
data = list(N=N, x=x),    # named list of data
chains = 1,
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
refresh = 0
)
fit2 <- stan(
model_code = StanModel,  # Stan program
data = list(N=N, x=y),    # named list of data
chains = 1,
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
refresh = 0
)
